defaults: &defaults
  docker:
    - image: docker.io/stackrox/apollo-ci:0.1.11-32-ga1cf8f1225
      auth:
        username: $DOCKER_IO_PULL_USERNAME
        password: $DOCKER_IO_PULL_PASSWORD
  working_directory: /go/src/github.com/stackrox/default-authz-plugin


version: 2

jobs:

  build:
    <<: *defaults

    steps:
      - checkout

      - run:
          name: Install OSSLS
          working_directory: /tmp
          command: |
            wget --quiet https://github.com/gruntwork-io/fetch/releases/download/v0.3.2/fetch_linux_amd64
            sudo install fetch_linux_amd64 /usr/bin/fetch
            export GITHUB_OAUTH_TOKEN="$GITHUB_TOKEN"
            fetch --repo="https://github.com/stackrox/ossls" --tag="0.5.0-rc1" --release-asset="ossls_linux_amd64" .
            sudo install ossls_linux_amd64 /usr/bin/ossls
            ossls version

      - run:
          name: Install linters
          command: |
            go get golang.org/x/tools/cmd/goimports
            go get golang.org/x/lint/golint

      - run:
          name: Verify dependencies are up-to-date
          command: |
            git ls-files --others --exclude-standard >/tmp/untracked
            make deps
            git diff --exit-code HEAD
            { git ls-files --others --exclude-standard ; cat /tmp/untracked ; } | sort | uniq -u >/tmp/untracked-new
            if [[ -s /tmp/untracked-new ]]; then
              echo 'Found new untracked files after running `make deps`. Please ensure your dependencies are up-to-date.'
              cat /tmp/untracked-new
              exit 1
            fi

      - run:
          name: Run style checks
          command: |
            make style

      - run:
          name: Run unit tests
          command: |
            make tests

      - run:
          name: Verify server binary can be built for the host system
          command: |
            make

      - run:
          name: Export source archives
          command: |
            mkdir -p source-archives
            .noexport/export.sh source-archives

      - store_artifacts:
          path: source-archives
          destination: src

      - run:
          name: Verify contents of source archives are equal
          command: |
            archive_dir="${PWD}/source-archives"
            archive_basename="default-authz-plugin-$(make tag)-src"

            mkdir -p /tmp/tgz-contents
            cd /tmp/tgz-contents
            tar xfvz "${archive_dir}/${archive_basename}.tar.gz"
            tar_digest="$(find . -type f -exec openssl dgst -sha256 {} \; | sort | openssl dgst -sha256)"

            mkdir -p /tmp/zip-contents
            cd /tmp/zip-contents
            unzip "${archive_dir}/${archive_basename}.zip"
            zip_digest="$(find . -type f -exec openssl dgst -sha256 {} \; | sort | openssl dgst -sha256)"

            if [[ "$tar_digest" != "$zip_digest" ]]; then
              echo >&2 "Digest mismatch between tar (${tar_digest}) and zip (${zip_digest}) contents."
              exit 1
            fi

      - run:
          name: Verify server binary can be built from source archive
          working_directory: /tmp/tgz-contents/default-authz-plugin
          command: |
            make

      - run:
          name: Verify unit tests and style checks pass for source archive
          working_directory: /tmp/tgz-contents/default-authz-plugin
          command: |
            make style tests

      - setup_remote_docker

      - run:
          name: Build image from source archive
          working_directory: /tmp/tgz-contents/default-authz-plugin
          command: |
            make image

      - run:
          name: Login to DockerHub
          command: |
            docker login -u "$DOCKER_IO_PUSH_USERNAME" -p "$DOCKER_IO_PUSH_PASSWORD" docker.io

      - run:
          name: Push image to DockerHub
          command: |
            image_tag="stackrox/default-authz-plugin:$(make tag)"
            docker tag stackrox/default-authz-plugin:latest "${image_tag}"
            docker push "${image_tag}"

      - persist_to_workspace:
          root: .
          paths:
            - source-archives


  publish:
    <<: *defaults

    steps:
      - run:
          name: Set up GCloud
          command: |
            gcloud auth activate-service-account --key-file <(echo "$GCLOUD_SERVICE_ACCOUNT")
            gcloud auth list

      - attach_workspace:
          at: /go/src/github.com/stackrox/default-authz-plugin

      - run:
          name: Verify that we have a CircleCI tag
          command: |
            [[ -n "$CIRCLE_TAG" ]]

      - run:
          name: Upload source archives
          command: |
            gsutil cp source-archives/* "gs://sr-authz-plugin-src/${CIRCLE_TAG}/"

      - setup_remote_docker

      - run:
          name: Log in to Dockerhub and stackrox.io
          command: |
            docker login -u "$DOCKER_IO_PUSH_USERNAME" -p "$DOCKER_IO_PUSH_PASSWORD" docker.io
            docker login -u "$STACKROX_IO_PUSH_USERNAME" -p "$STACKROX_IO_PUSH_PASSWORD" stackrox.io

      - run:
          name: Push images to stackrox.io
          command: |
            dockerhub_tag="docker.io/stackrox/default-authz-plugin:${CIRCLE_TAG}"
            stackroxio_tag="stackrox.io/default-authz-plugin:${CIRCLE_TAG}"
            docker pull "$dockerhub_tag"
            docker tag "$dockerhub_tag" "$stackroxio_tag"
            docker push "$stackroxio_tag"

  release:
    docker:
      - image: cibuilds/github:0.12.0
    working_directory: /go/src/github.com/stackrox/default-authz-plugin
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Verify that we have a CircleCI tag
          command: |
            [[ -n "$CIRCLE_TAG" ]]

      - run:
          name: Upload artifacts
          command: |
            RELEASE_BODY="Release version ${CIRCLE_TAG} of the Default Authorization Plugin

            This release is **NOT** ready to be distributed to customers.

            **IMPORTANT**: DO **NOT** distribute the GitHub-created "Source code" archives to customers (these will
            carry names like \`${CIRCLE_TAG}.zip\` or \`${CIRCLE_TAG}.tar.gz\`). Instead, use the attached files named
            \`default-authz-plugin-${CIRCLE_TAG}-src.{zip,tar.gz}\`. You can also find them in the
            \`sr-authz-plugin-src\` GCloud bucket at
            \`gs://sr-authz-plugin-src/${CIRCLE_TAG}/default-authz-plugin-${CIRCLE_TAG}-src.{zip,tar.gz}\`.
            "

            ghr -u stackrox -r default-authz-plugin -draft -prerelease \
              -n "Release ${CIRCLE_TAG} [NOT FOR DISTRIBUTION]" \
              -b "$RELEASE_BODY" \
              source-archives/

workflows:
  version: 2
  build:
    jobs:
      - build:
          context: docker-io-push
          filters:
            tags:
              only: /.*/

      - publish:
          context: docker-io-and-stackrox-io-push
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(?!.*-rc\.\d+$).*$/

      - release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(?!.*-rc\.\d+$).*$/
